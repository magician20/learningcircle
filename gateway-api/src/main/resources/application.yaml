# Application Properties
scheme: http
keycloak-local: localhost
# keycloak-container: 172.17.0.2
keycloak-port: 8080
keycloak-realm: uniSpace
keycloak-client-id: unispace-api
keycloak-secret: hGWhpf30BkhSXmbVdDkFoDuVwtmbZUCY
keycloak-issuer: ${scheme}://${keycloak-local}:${keycloak-port}/realms/${keycloak-realm}

# gateway uri  port 8081
gateway-uri: ${scheme}://localhost:${server.port}
# api uri port 8082
greetings-api-uri: ${scheme}://localhost:8082
# frontend uri

server:
  port: 8081
  error:
    include-message: always
  ssl:
    enabled: false

spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s
  output:
   ansi:
      enabled: always    
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: ${keycloak-issuer}
        registration:
          keycloak-confidential-user:
           # authorization_code or client-credentials
            authorization-grant-type: client-credentials
            client-name: Keycloak
            client-id: ${keycloak-client-id}
            client-secret: ${keycloak-secret}
            provider: keycloak
            scope: openid,profile,email,offline_access,roles
            #redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"

cloud:
    gateway:
      default-filters:
      - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      - SaveSession
      routes:
      - id: home
        uri: ${gateway-uri}
        predicates:
        - Path=/
        filters:
        - RedirectTo=301,${gateway-uri}/ui/      
      - id: greetings-api
        uri: ${greetings-api-uri}
        predicates:
        - Path=/v1/**
        filters:
        - TokenRelay=
        # - StripPrefix=1
      - id: test-api
        uri: ${greetings-api-uri}
        predicates:
        - Path=/api/test/**
        filters:
        - TokenRelay=
        # - StripPrefix=2        
      - id: letsencrypt
        uri: https://cert-manager-webhook
        predicates:
        - Path=/.well-known/acme-challenge/** 

com:
  c4-soft:
    springaddons:
      security:
        issuers:
        - location: ${keycloak-issuer}
          username-claim: preferred_username
          authorities:
          - path: $.realm_access.roles
          - path: $.resource_access.*.roles
        client:
          # used to work with absolute URIs in login process
          client-uri: ${gateway-uri}
          # an array of path matchers for routes processed by the auto-configured client security filter-chain.
          # If null auto-configuration is turned off. Here, it will filter all traffic.
          security-matchers: /**
          # a list of path matchers for resources accessible to all requests, 
          # even unauthorized ones (end-points not listed here like /logout will be accessible only to authenticated users)
          permit-all:
          # used by Spring during the authorizatoin-code flow
          - /login/**
          - /oauth2/**
          # unauthorized users can display the Angular app containing a landing page and login buttons
          # end-points on the gateway itself exposing the different URIs to initiate an authorization-code flow
          # - /ui/**          
          # public access to Gateway OpenAPI 
          - /v3/api-docs/**
          - /actuator/health/readiness
          - /actuator/health/liveness
          - /.well-known/acme-challenge/**
          csrf: cookie-accessible-from-js
          login-path: /
          post-login-redirect-path: /
          post-logout-redirect-path: /
          back-channel-logout-enabled: true
          
management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    root: INFO
    org:
      springframework:
        security: INFO

# SSL profile       
---
scheme: https
keycloak-port: ${keycloak-port}

spring:
  config:
    activate:
      on-profile: ssl
  cloud:
    gateway:
      default-filters:
      - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      - SaveSession
      - SecureHeaders
server:
  ssl:
    enabled: true